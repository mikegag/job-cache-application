{"ast":null,"code":"var _jsxFileName = \"/Users/mg/Documents/documentsStorage/coding/personal/jobcache/client/job-cache-app/src/components/Motivation/Quote.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Quote() {\n  _s();\n  const viewedQuote = useRef(true);\n  const [randomQuote, setRandomQuote] = useState(() => {\n    // Retrieve the quote from local storage on initial render\n    const storedQuote = localStorage.getItem(\"randomQuote\");\n    return storedQuote ? JSON.parse(storedQuote) : null;\n  });\n  const getQuote = () => {\n    const quotes = quotesData.quotes;\n    const randomIndex = Math.floor(Math.random() * quotes.length);\n    const quote = quotes[randomIndex];\n    setRandomQuote(quote);\n    localStorage.setItem(\"randomQuote\", JSON.stringify(quote));\n    localStorage.setItem(\"lastQuoteTime\", Date.now());\n  };\n  useEffect(() => {\n    const lastQuoteTime = localStorage.getItem('lastQuoteTime');\n    const currentTime = Date.now();\n    const timeElapsed = currentTime - lastQuoteTime;\n    //refreshes every 16 hours\n    if (!viewedQuote.current || timeElapsed >= 1000 * 60 * 60 * 16) {\n      getQuote();\n      viewedQuote.current = true;\n    }\n    const intervalId = setInterval(() => {\n      getQuote();\n    }, 1000 * 60 * 60 * 16 - timeElapsed);\n    return () => {\n      clearInterval(intervalId);\n      viewedQuote.current = false;\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: randomQuote ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [randomQuote.quote, \" - \", randomQuote.author]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Check back later for a Motivational Quote!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n}\n_s(Quote, \"ecxMJWohoK3u3PaHA9/Kh5LoLrA=\");\n_c = Quote;\nvar _c;\n$RefreshReg$(_c, \"Quote\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","Quote","_s","viewedQuote","useRef","randomQuote","setRandomQuote","useState","storedQuote","localStorage","getItem","JSON","parse","getQuote","quotes","quotesData","randomIndex","Math","floor","random","length","quote","setItem","stringify","Date","now","lastQuoteTime","currentTime","timeElapsed","current","intervalId","setInterval","clearInterval","children","author","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mg/Documents/documentsStorage/coding/personal/jobcache/client/job-cache-app/src/components/Motivation/Quote.jsx"],"sourcesContent":["import React from \"react\"\nimport { useEffect } from \"react\"\n\nexport default function Quote() {\n\n    const viewedQuote = useRef(true)\n    const [randomQuote, setRandomQuote] = useState(() => {\n        // Retrieve the quote from local storage on initial render\n        const storedQuote = localStorage.getItem(\"randomQuote\")\n        return storedQuote ? JSON.parse(storedQuote) : null\n    })\n\n    const getQuote = () => {\n        const quotes = quotesData.quotes\n        const randomIndex = Math.floor(Math.random() * quotes.length)\n        const quote = quotes[randomIndex]\n        setRandomQuote(quote)\n        localStorage.setItem(\"randomQuote\", JSON.stringify(quote))\n        localStorage.setItem(\"lastQuoteTime\", Date.now())\n    }\n\n    useEffect(() => {\n        const lastQuoteTime = localStorage.getItem('lastQuoteTime')\n        const currentTime = Date.now()\n        const timeElapsed = currentTime - lastQuoteTime\n        //refreshes every 16 hours\n        if (!viewedQuote.current || timeElapsed >= 1000 * 60 * 60 * 16) {\n          getQuote()\n          viewedQuote.current = true\n        }\n    \n        const intervalId = setInterval(() => {\n          getQuote()\n        }, 1000 * 60 * 60 * 16 - timeElapsed)\n    \n        return () => {\n            clearInterval(intervalId)\n            viewedQuote.current = false\n        }\n    }, [])\n\n    return (\n        <>\n            {randomQuote ? \n                <p>{randomQuote.quote} - {randomQuote.author}</p>\n            :\n                <p>Check back later for a Motivational Quote!</p>\n            }\n        </>\n    )\n}\n\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEjC,eAAe,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EAE5B,MAAMC,WAAW,GAAGC,MAAM,CAAC,IAAI,CAAC;EAChC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGC,QAAQ,CAAC,MAAM;IACjD;IACA,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACvD,OAAOF,WAAW,GAAGG,IAAI,CAACC,KAAK,CAACJ,WAAW,CAAC,GAAG,IAAI;EACvD,CAAC,CAAC;EAEF,MAAMK,QAAQ,GAAGA,CAAA,KAAM;IACnB,MAAMC,MAAM,GAAGC,UAAU,CAACD,MAAM;IAChC,MAAME,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGL,MAAM,CAACM,MAAM,CAAC;IAC7D,MAAMC,KAAK,GAAGP,MAAM,CAACE,WAAW,CAAC;IACjCV,cAAc,CAACe,KAAK,CAAC;IACrBZ,YAAY,CAACa,OAAO,CAAC,aAAa,EAAEX,IAAI,CAACY,SAAS,CAACF,KAAK,CAAC,CAAC;IAC1DZ,YAAY,CAACa,OAAO,CAAC,eAAe,EAAEE,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;EACrD,CAAC;EAED7B,SAAS,CAAC,MAAM;IACZ,MAAM8B,aAAa,GAAGjB,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;IAC3D,MAAMiB,WAAW,GAAGH,IAAI,CAACC,GAAG,CAAC,CAAC;IAC9B,MAAMG,WAAW,GAAGD,WAAW,GAAGD,aAAa;IAC/C;IACA,IAAI,CAACvB,WAAW,CAAC0B,OAAO,IAAID,WAAW,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;MAC9Df,QAAQ,CAAC,CAAC;MACVV,WAAW,CAAC0B,OAAO,GAAG,IAAI;IAC5B;IAEA,MAAMC,UAAU,GAAGC,WAAW,CAAC,MAAM;MACnClB,QAAQ,CAAC,CAAC;IACZ,CAAC,EAAE,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAGe,WAAW,CAAC;IAErC,OAAO,MAAM;MACTI,aAAa,CAACF,UAAU,CAAC;MACzB3B,WAAW,CAAC0B,OAAO,GAAG,KAAK;IAC/B,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,oBACI/B,OAAA,CAAAE,SAAA;IAAAiC,QAAA,EACK5B,WAAW,gBACRP,OAAA;MAAAmC,QAAA,GAAI5B,WAAW,CAACgB,KAAK,EAAC,KAAG,EAAChB,WAAW,CAAC6B,MAAM;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,gBAEjDxC,OAAA;MAAAmC,QAAA,EAAG;IAA0C;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EAAC,gBAEvD,CAAC;AAEX;AAACpC,EAAA,CA/CuBD,KAAK;AAAAsC,EAAA,GAALtC,KAAK;AAAA,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}