{"ast":null,"code":"var _jsxFileName = \"/Users/mg/Documents/documentsStorage/coding/personal/jobcache/client/job-cache-app/src/components/ProtectedRoute.jsx\";\nimport React from \"react\";\nimport { Route, Navigate } from \"react-router-dom\";\n\n// This function represents your authentication logic.\n// Replace it with your actual authentication logic.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isAuthenticated = () => {\n  // Check if the user is authenticated\n  // For testing purposes, you can return true or false.\n  // Later, replace this with your authentication logic.\n  return true; // Assuming the user is not authenticated initially\n};\nexport default function ProtectedRoute({\n  component: Component,\n  ...rest\n}) {\n  return /*#__PURE__*/_jsxDEV(Route, {\n    ...rest,\n    render: props => isAuthenticated() ? /*#__PURE__*/_jsxDEV(Component, {\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n}\n_c = ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Route","Navigate","jsxDEV","_jsxDEV","isAuthenticated","ProtectedRoute","component","Component","rest","render","props","fileName","_jsxFileName","lineNumber","columnNumber","to","replace","_c","$RefreshReg$"],"sources":["/Users/mg/Documents/documentsStorage/coding/personal/jobcache/client/job-cache-app/src/components/ProtectedRoute.jsx"],"sourcesContent":["import React from \"react\"\nimport { Route, Navigate } from \"react-router-dom\"\n\n// This function represents your authentication logic.\n// Replace it with your actual authentication logic.\nconst isAuthenticated = () => {\n  // Check if the user is authenticated\n  // For testing purposes, you can return true or false.\n  // Later, replace this with your authentication logic.\n  return true; // Assuming the user is not authenticated initially\n}\n\nexport default function ProtectedRoute ({ component: Component, ...rest }) {\n  \n    return (\n        <Route\n        {...rest}\n        render={(props) =>\n            isAuthenticated() ? (\n            <Component {...props} />\n            ) : (\n            <Navigate to=\"/login\" replace />\n            )\n        }\n        />\n    )\n}\n\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,EAAEC,QAAQ,QAAQ,kBAAkB;;AAElD;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAC5B;EACA;EACA;EACA,OAAO,IAAI,CAAC,CAAC;AACf,CAAC;AAED,eAAe,SAASC,cAAcA,CAAE;EAAEC,SAAS,EAAEC,SAAS;EAAE,GAAGC;AAAK,CAAC,EAAE;EAEvE,oBACIL,OAAA,CAACH,KAAK;IAAA,GACFQ,IAAI;IACRC,MAAM,EAAGC,KAAK,IACVN,eAAe,CAAC,CAAC,gBACjBD,OAAA,CAACI,SAAS;MAAA,GAAKG;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAExBX,OAAA,CAACF,QAAQ;MAACc,EAAE,EAAC,QAAQ;MAACC,OAAO;IAAA;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAElC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEV;AAACG,EAAA,GAduBZ,cAAc;AAAA,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}